<p style="margin: 10px auto; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;"><span style="font-size: 18px;"><strong>本教程教生成实时应用程序使用 ASP.NET Core SignalR 的基础知识。</strong></span></p><p style="margin: 10px auto; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">&nbsp; &nbsp; &nbsp; &nbsp; SignalR在.net core2.1以前是需要下载 Microsoft.AspNetCore.SignalR 包。在.net core 2.1的时候sdk集成了这个包，所以就不要添加包，本文演示的也是基于.net core 2.1的，请确保你的sdk为2.1如果不是请安装.net core 2.1。</p><p style="margin: 10px auto; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">&nbsp; &nbsp; &nbsp; &nbsp; 官方SDK下载地址为：https://www.microsoft.com/net/download/visual-studio-sdks。</p><p style="margin: 10px auto; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(255, 0, 0);"><strong>&nbsp;完整程序代码</strong></span>：https://pan.baidu.com/s/1pYp9oxBaRmwoq8AAkpji1A</p><p style="margin: 10px auto; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">&nbsp; &nbsp; &nbsp; &nbsp; 本教程演示SignalR以下内容：</p><p style="margin: 10px auto 10px 60px; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">1、<span class="x-hidden-focus">在 ASP.NET 核心 web 应用上创建 SignalR。</span></p><p style="margin: 10px auto 10px 60px; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;"><span class="x-hidden-focus">2、</span><span class="x-hidden-focus">创建一个 SignalR 集线器，以将内容推送到客户端。</span></p><p style="margin: 10px auto 10px 60px; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">3、修改<span style="color: rgb(255, 0, 0);"><code>Startup</code></span>类并将应用配置。</p><p style="margin: 10px auto 10px 30px; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;"><span class="x-hidden-focus">必要条件：</span></p><p style="margin: 10px auto 10px 60px; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">1、<a class="x-hidden-focus" href="https://www.microsoft.com/net/download/dotnet-core/sdk-2.1.300-preview2">.NET 核心 2.1.0 预览 2 SDK</a>或更高版本</p><p style="margin: 10px auto 10px 60px; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">2、<a class="x-hidden-focus" href="https://www.visualstudio.com/downloads/">Visual Studio 2017</a>&nbsp;15.7 或使用更高版本ASP.NET 和 web 开发工作负荷或者<span class="x-hidden-focus"><a href="https://code.visualstudio.com/download">Visual Studio Code</a>（不推荐，不知道是插件安装不对吗,代码提示不智能）</span></p><p style="margin: 10px auto 10px 60px; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;">3、<span class="x-hidden-focus"><a href="https://www.npmjs.com/get-npm">npm</a></span></p><p style="margin: 10px auto 10px 30px; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; white-space: normal;"><span class="x-hidden-focus">本文以<a class="x-hidden-focus" href="https://www.visualstudio.com/downloads/">Visual Studio 2017</a>&nbsp;开发工具讲解。</span></p><h2 class="heading-with-anchor" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; white-space: normal;"><span class="x-hidden-focus" style="font-size: 14pt;">创建 ASP.NET Core 项目承载 SignalR 客户端和服务器</span></h2><ol style="padding-left: 50px;" class=" list-paddingleft-2"><li><p style="margin: 10px auto;">将类添加到项目中，通过选择文件&nbsp;&gt;&nbsp;新建&nbsp;&gt;&nbsp;文件并选择Visual C# 类。</p></li></ol><p style="text-align:center"><img src="/upload/image/20180530/6366330559008490805417164.png" title="1400695-20180514210817177-1576821347.png" alt="1400695-20180514210817177-1576821347.png" width="952" height="648"/></p><p><br/></p><p style="text-align:center"><img src="https://images2018.cnblogs.com/blog/1400695/201805/1400695-20180514211105787-2003804073.png" width="948" height="625"/></p><ol style="padding: 0px 0px 0px 40px;" class=" list-paddingleft-2"><li><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">继承自<code style="margin: 0px; padding: 0px;">Microsoft.AspNetCore.SignalR.Hub</code>。&nbsp;<span style="margin: 0px; padding: 0px; line-height: 1.5;"><code style="margin: 0px; padding: 0px;">Hub</code>类包含属性和管理连接和组，以及发送和接收数据的事件。</span></span></p></li><li><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">创建<code style="margin: 0px; padding: 0px;">SendMessage</code>将消息发送到所有连接的聊天客户端的方法。&nbsp;<span style="margin: 0px; padding: 0px; line-height: 1.5;">请注意它将返回<a href="https://msdn.microsoft.com/library/system.threading.tasks.task(v=vs.110).aspx" style="margin: 0px; padding: 0px; color: rgb(51, 51, 51);">任务</a>，这是因为 SignalR 是异步的。&nbsp;<span style="margin: 0px; padding: 0px; line-height: 1.5;">更好地缩放异步代码。</span></span></span></p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(51, 51, 51); text-decoration-line: underline; border: none !important;"></a></span></p><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;" class="brush:c#;toolbar:false;">using&nbsp;System;
using&nbsp;System.Collections.Generic;
using&nbsp;System.Linq;
using&nbsp;System.Threading.Tasks;
using&nbsp;Microsoft.AspNetCore.SignalR;

namespace&nbsp;SignalRChat.Hubs
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;ChatHub&nbsp;:&nbsp;Hub
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;建立连接时触发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;&lt;/returns&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;override&nbsp;async&nbsp;Task&nbsp;OnConnectedAsync()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;Clients.All.SendAsync(&quot;ReceiveMessage&quot;,&nbsp;$&quot;{Context.ConnectionId}&nbsp;joined&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;离开连接时触发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;ex&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;&lt;/returns&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;override&nbsp;async&nbsp;Task&nbsp;OnDisconnectedAsync(Exception&nbsp;ex)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;Clients.All.SendAsync(&quot;ReceiveMessage&quot;,&nbsp;$&quot;{Context.ConnectionId}&nbsp;left&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;向所有人推送消息
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;message&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;&lt;/returns&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Task&nbsp;Send(string&nbsp;message)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Clients.All.SendAsync(&quot;ReceiveMessage&quot;,&nbsp;$&quot;{Context.ConnectionId}:&nbsp;{message}&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;向指定组推送消息
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;groupName&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;message&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;&lt;/returns&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Task&nbsp;SendToGroup(string&nbsp;groupName,&nbsp;string&nbsp;message)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Clients.Group(groupName).SendAsync(&quot;ReceiveMessage&quot;,&nbsp;$&quot;{Context.ConnectionId}@{groupName}:&nbsp;{message}&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;加入指定组并向组推送消息
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;groupName&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;&lt;/returns&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&nbsp;JoinGroup(string&nbsp;groupName)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;Groups.AddToGroupAsync(Context.ConnectionId,&nbsp;groupName);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;Clients.Group(groupName).SendAsync(&quot;ReceiveMessage&quot;,&nbsp;$&quot;{Context.ConnectionId}&nbsp;joined&nbsp;{groupName}&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;推出指定组并向组推送消息
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;groupName&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;&lt;/returns&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&nbsp;LeaveGroup(string&nbsp;groupName)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;Groups.RemoveFromGroupAsync(Context.ConnectionId,&nbsp;groupName);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;Clients.Group(groupName).SendAsync(&quot;ReceiveMessage&quot;,&nbsp;$&quot;{Context.ConnectionId}&nbsp;left&nbsp;{groupName}&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;向指定Id推送消息
&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;userid&quot;&gt;要推送消息的对象&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;message&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;&lt;/returns&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Task&nbsp;Echo(string&nbsp;userid,&nbsp;string&nbsp;message)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Clients.Client(Context.ConnectionId).SendAsync(&quot;ReceiveMessage&quot;,&nbsp;$&quot;{Context.ConnectionId}:&nbsp;{message}&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;向所有人推送消息
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;user&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name=&quot;message&quot;&gt;&lt;/param&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;&lt;/returns&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&nbsp;SendMessage(string&nbsp;user,&nbsp;string&nbsp;message)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;Clients.All.SendAsync(&quot;ReceiveMessage&quot;,&nbsp;Context.ConnectionId,&nbsp;message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p><br/></p><p style="margin: 10px auto; padding: 0px; line-height: 1.5;">　　</p></li><li><p><img src="https://images2018.cnblogs.com/blog/1400695/201805/1400695-20180514211630270-2080916205.png" alt=""/></p></li></ol><h2 class="heading-with-anchor" style="margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><span style="margin: 0px; padding: 0px; line-height: 1.5;">配置项目以使用 SignalR</span></h2><p style="margin: 10px auto; padding: 0px; line-height: 1.5; font-size: 13px; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><span style="margin: 0px; padding: 0px; line-height: 1.5;">必须配置 SignalR 服务器，这样就知道要传递给 SignalR 的请求。</span></p><ol style="padding: 0px 0px 0px 40px; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">若要配置 SignalR 项目，请修改项目的<code style="margin: 0px; padding: 0px;">Startup.ConfigureServices</code>方法。</span></p><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;"><code style="margin: 0px; padding: 0px;">services.AddSignalR</code>&nbsp;作为的一部分添加 SignalR<a class="xref" href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/middleware/index?view=aspnetcore-2.1" style="margin: 0px; padding: 0px; color: rgb(51, 51, 51);">中间件</a>管道。</span></p></li><li><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">配置路由到你使用的中心<code style="margin: 0px; padding: 0px;">UseSignalR</code>。</span></p><p><br/></p><p style="margin: 10px auto; padding: 0px; line-height: 1.5;">&nbsp;<img src="https://images2018.cnblogs.com/blog/1400695/201805/1400695-20180514211936604-929014147.png" alt=""/></p></li></ol><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><br/></p><ol style="padding: 0px 0px 0px 40px; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><pre class="brush:c#;toolbar:false">using&nbsp;Microsoft.AspNetCore.Builder;
using&nbsp;Microsoft.AspNetCore.Hosting;
using&nbsp;Microsoft.AspNetCore.Http;
using&nbsp;Microsoft.Extensions.Configuration;
using&nbsp;Microsoft.Extensions.DependencyInjection;
using&nbsp;SignalRChat.Hubs;

namespace&nbsp;SignalRChat
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;Startup
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Startup(IConfiguration&nbsp;configuration)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Configuration&nbsp;=&nbsp;configuration;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IConfiguration&nbsp;Configuration&nbsp;{&nbsp;get;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;ConfigureServices(IServiceCollection&nbsp;services)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services.Configure&lt;CookiePolicyOptions&gt;(options&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.CheckConsentNeeded&nbsp;=&nbsp;context&nbsp;=&gt;&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.MinimumSameSitePolicy&nbsp;=&nbsp;SameSiteMode.None;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services.AddMvc();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services.AddSignalR();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Configure(IApplicationBuilder&nbsp;app,&nbsp;IHostingEnvironment&nbsp;env)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(env.IsDevelopment())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseBrowserLink();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseDeveloperExceptionPage();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseExceptionHandler(&quot;/Error&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseHsts();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseHttpsRedirection();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseStaticFiles();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseCookiePolicy();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseSignalR(routes&nbsp;=&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routes.MapHub&lt;ChatHub&gt;(&quot;/chathub&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.UseMvc();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre></li></ol><h2 class="heading-with-anchor" style="margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><span style="margin: 0px; padding: 0px; line-height: 1.5;">创建 SignalR 客户端代码</span></h2><ol style="padding: 0px 0px 0px 40px; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; font-size: 13px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">替换中的内容<em style="margin: 0px; padding: 0px;">Pages\Index.cshtml</em>替换为以下代码：</span></p><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(51, 51, 51); text-decoration-line: underline; border: none !important;"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"/></a></span></p><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;">@page&lt;div&nbsp;class=&quot;container&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;row&quot;&gt;&amp;nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;row&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;col-6&quot;&gt;&amp;nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;col-6&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User..........&lt;input&nbsp;type=&quot;text&quot;&nbsp;id=&quot;userInput&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Message...&lt;input&nbsp;type=&quot;text&quot;&nbsp;id=&quot;messageInput&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;button&quot;&nbsp;id=&quot;sendButton&quot;&nbsp;value=&quot;Send&nbsp;Message&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;row&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;col-12&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hr&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;row&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;col-6&quot;&gt;&amp;nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;col-6&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&nbsp;id=&quot;messagesList&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&lt;/div&gt;&lt;script&nbsp;src=&quot;~/lib/SingnlR/signalr.js&quot;&gt;&lt;/script&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;connection&nbsp;=&nbsp;new&nbsp;signalR.HubConnectionBuilder().withUrl(&quot;/chatHub&quot;).build();
&nbsp;&nbsp;&nbsp;&nbsp;connection.on(&quot;ReceiveMessage&quot;,&nbsp;(user,&nbsp;message)&nbsp;=&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;encodedMsg&nbsp;=&nbsp;user&nbsp;+&nbsp;&quot;&nbsp;says&nbsp;&quot;&nbsp;+&nbsp;message;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;li&nbsp;=&nbsp;document.createElement(&quot;li&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;li.textContent&nbsp;=&nbsp;encodedMsg;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;messagesList&quot;).appendChild(li);
&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;sendButton&quot;).addEventListener(&quot;click&quot;,&nbsp;event&nbsp;=&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;document.getElementById(&quot;userInput&quot;).value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;message&nbsp;=&nbsp;document.getElementById(&quot;messageInput&quot;).value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connection.invoke(&quot;SendMessage&quot;,&nbsp;user,&nbsp;message).catch(err&nbsp;=&gt;&nbsp;console.error(err.toString()));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.preventDefault();
&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;connection.start().catch(err&nbsp;=&gt;&nbsp;console.error(err.toString()));&lt;/script&gt;</pre><p><span class="cnblogs_code_copy" style="margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5;"><a title="复制代码" style="margin: 0px; padding: 0px; color: rgb(51, 51, 51); text-decoration-line: underline; border: none !important;"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"/></a></span></p><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><img src="https://images2018.cnblogs.com/blog/1400695/201805/1400695-20180514212409367-1666028921.png" alt=""/></p><p style="margin: 10px auto; padding: 0px; line-height: 1.5;">&nbsp;</p><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">前面的 HTML 显示名称和消息字段和提交按钮。&nbsp;<span style="margin: 0px; padding: 0px; line-height: 1.5;">请注意在底部的脚本引用： 至于 SignalR</span></span><span class="x-hidden-focus" style="margin: 0px; padding: 0px; line-height: 1.5;">在中运行以下命令程序包管理器控制台窗口，</span></p><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;">npm&nbsp;init&nbsp;-y
npm&nbsp;install&nbsp;@aspnet/signalr</pre><p style="margin: 10px auto; padding: 0px; line-height: 1.5;">&nbsp;</p><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span class="x-hidden-focus" style="margin: 0px; padding: 0px; line-height: 1.5;">请从项目根：</span>复制<em style="margin: 0px; padding: 0px;">signalr.js</em>文件从<em style="margin: 0px; padding: 0px;">node_modules\ @aspnet\signalr\dist\browser* 到</em>lib*项目文件夹中的。</p></li></ol><h2 class="heading-with-anchor" style="margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><span style="margin: 0px; padding: 0px; line-height: 1.5;">运行应用</span></h2><ul style="margin-left: 30px; padding: 0px; word-break: break-all;" class=" list-paddingleft-2"><li><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/signalr/get-started?view=aspnetcore-2.1&tabs=visual-studio#tabpanel_CeZOj-G++Q-3_visual-studio" style="margin: 0px; padding: 0px; color: rgb(51, 51, 51);"><span style="margin: 0px; padding: 0px; line-height: 1.5;">Visual Studio</span></a></p></li><li><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/signalr/get-started?view=aspnetcore-2.1&tabs=visual-studio#tabpanel_CeZOj-G++Q-3_visual-studio-code" style="margin: 0px; padding: 0px; color: rgb(51, 51, 51);"><span style="margin: 0px; padding: 0px; line-height: 1.5;">Visual Studio Code</span></a></p></li></ul><ol style="padding: 0px 0px 0px 40px;" class=" list-paddingleft-2"><li><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">选择调试&nbsp;&gt;&nbsp;启动而不调试启动浏览器并加载网站本地。&nbsp;<span style="margin: 0px; padding: 0px; line-height: 1.5;">从地址栏复制 URL。</span></span></p></li><li><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">打开另一个浏览器实例 （任何浏览器），然后在地址栏中粘贴该 URL。</span></p></li><li><p style="margin: 10px auto; padding: 0px; line-height: 1.5;"><span style="margin: 0px; padding: 0px; line-height: 1.5;">选择任一浏览器，输入名称和消息，然后单击发送按钮。&nbsp;<span style="margin: 0px; padding: 0px; line-height: 1.5;">名称和消息会显示在两个页面上立即。</span></span></p></li></ol><p style="margin: 10px auto; padding: 0px; line-height: 1.5; font-size: 13px; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><img src="https://images2018.cnblogs.com/blog/1400695/201805/1400695-20180514213327805-1053830859.png" alt=""/></p><p style="margin: 10px auto; padding: 0px; line-height: 1.5; font-size: 13px; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><img src="https://images2018.cnblogs.com/blog/1400695/201805/1400695-20180514213405857-976077299.png" alt=""/></p><p style="margin: 10px auto; padding: 0px; line-height: 1.5; font-size: 13px; font-family: verdana, &quot;ms song&quot;, 宋体, Arial, 微软雅黑, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);">&nbsp;</p><p><br/></p>